{"version":3,"sources":["db.js","App.js","serviceWorker.js","index.js"],"names":["db","title","details","dayOfSeason","date","Date","DEFAULT_VALUE","fromNow","time","localTime","moment","utc","local","concat","calendar","sameDay","nextDay","nextWeek","lastDay","lastWeek","sameElse","EventItem","_ref","react_default","a","createElement","className","ConverterSection","state","handleTimeChange","event","value","target","console","log","_this","setState","this","defaultValue","type","onChange","React","Component","EventListSection","map","i","App_EventItem","Object","assign","key","App","App_ConverterSection","App_EventListSection","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yOAGMA,EAAK,CACP,CACIC,MAAO,kBACPC,QAAS,4BACTC,YAAa,GACbC,KAAM,IAAIC,KAAK,0BAEnB,CACIJ,MAAO,iCACPC,QAAS,+DACTC,YAAa,GACbC,KAAM,IAAIC,KAAK,2BAEnB,CACIJ,MAAO,+BACPC,QAAS,0CACTC,YAAa,GACbC,KAAM,IAAIC,KAAK,0BAEnB,CACIJ,MAAO,+BACPC,QAAS,0CACTC,YAAa,GACbC,KAAM,IAAIC,KAAK,0BAEnB,CACIJ,MAAO,gCACPC,QAAS,YACTC,YAAa,GACbC,KAAM,IAAIC,KAAK,2BAEnB,CACIJ,MAAO,gBACPC,QAAS,wBACTC,YAAa,GACbC,KAAM,IAAIC,KAAK,4BChCjBC,SAAgB,oBAGtB,SAASC,EAAQC,GACf,IAAMC,EAAYC,IAAOC,IAAIH,GAAMI,QACnC,SAAAC,OAAUJ,EAAUK,SAAS,KAAM,CACjCC,QAAS,kBACTC,QAAS,qBACTC,SAAU,eACVC,QAAS,sBACTC,SAAU,iBACVC,SAAU,uBANZ,MAAAP,OAOOJ,EAAUF,UAPjB,KAUF,IAAMc,EAAY,SAAAC,GAAA,IAAErB,EAAFqB,EAAErB,MAAOC,EAAToB,EAASpB,QAASC,EAAlBmB,EAAkBnB,YAAaC,EAA/BkB,EAA+BlB,KAA/B,OAChBmB,EAAAC,EAAAC,cAAA,MAAIC,UAAU,cACZH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eAAezB,GAC9BsB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBAAiBxB,GAChCqB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cAAf,SACSnB,EAAQH,GACfmB,EAAAC,EAAAC,cAAA,WAFF,kBAGkBtB,KAKhBwB,6MACJC,MAAQ,CACNnB,UAAWF,EAAQG,IAAOC,IAAIL,OAGhCuB,iBAAmB,SAACC,GAAU,IACpBC,EAAUD,EAAME,OAAhBD,MACRE,QAAQC,IAAIH,GACZI,EAAKC,SAAS,CACZ3B,UAAWF,EAAQG,IAAOC,IAAIoB,+EAIzB,IACAtB,EAAa4B,KAAKT,MAAlBnB,UACP,OACEc,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,wCACAF,EAAAC,EAAAC,cAAA,SACEF,EAAAC,EAAAC,cAAA,kCACAF,EAAAC,EAAAC,cAAA,SAAOa,aAAchC,EAAeiC,KAAK,iBAAiBC,SAAUH,KAAKR,oBAE5D,KAAdpB,EACCc,EAAAC,EAAAC,cAAA,SACEF,EAAAC,EAAAC,cAAA,2BACAF,EAAAC,EAAAC,cAAA,YAAOhB,IAEP,aA3BmBgC,IAAMC,WAmC/BC,EAAmB,WACvB,OACEpB,EAAAC,EAAAC,cAAA,WAASC,UAAU,UACjBH,EAAAC,EAAAC,cAAA,wBACAF,EAAAC,EAAAC,cAAA,UACGzB,EAAG4C,IAAI,SAACd,EAAOe,GAAR,OAActB,EAAAC,EAAAC,cAACqB,EAADC,OAAAC,OAAA,CAAWC,IAAKJ,GAAOf,SAgBtCoB,MAVf,WACE,OACE3B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAC0B,EAAD,MACA5B,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAC2B,EAAD,QCxEcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOpC,EAAAC,EAAAC,cAACmC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.3da692bb.chunk.js","sourcesContent":["// Times are in UTC\n// Source:\n\nconst db = [\n    {\n        title: 'Second GvGs End',\n        details: 'End of GvGs, Scoring Ends',\n        dayOfSeason: 57,\n        date: new Date('6/15/2019 0:00 AM UTC')\n    },\n    {\n        title: 'Last Territory Reset, Score x2',\n        details: 'Territories unclaimable, reset territories, score multiplier',\n        dayOfSeason: 57,\n        date: new Date('6/15/2019 11:00 AM UTC')\n    },\n    {\n        title: 'Third (and Last) Invasion EU',\n        details: 'Guardians Appear, Territories claimable',\n        dayOfSeason: 57,\n        date: new Date('6/15/2019 6:00 PM UTC')\n    },\n    {\n        title: 'Third (and Last) Invasion US',\n        details: 'Guardians Appear, Territories claimable',\n        dayOfSeason: 58,\n        date: new Date('6/16/2019 1:00 AM UTC')\n    },\n    {\n        title: 'Start of final GvGs of season',\n        details: 'GvG start',\n        dayOfSeason: 59,\n        date: new Date('6/17/2019 11:00 AM UTC')\n    },\n    {\n        title: 'Season #6 End',\n        details: 'GvG end, scoring ends',\n        dayOfSeason: 85,\n        date: new Date('7/13/2019 11:00 AM UTC')\n    },\n];\n\nexport {db};","import React from 'react';\nimport moment from 'moment';\nimport {db} from './db';\nimport './App.css';\n\n\nconst DEFAULT_VALUE = \"2019-05-20T22:00\";\n\n// https://momentjs.com/docs/#/displaying/calendar-time/\nfunction fromNow(time) {\n  const localTime = moment.utc(time).local();\n  return `${localTime.calendar(null, {\n    sameDay: '[Today] [at] LT',\n    nextDay: '[Tomorrow] [at] LT',\n    nextWeek: 'dddd [at] LT',\n    lastDay: '[Yesterday] [at] LT',\n    lastWeek: '[Last] [at] LT',\n    sameElse: 'DD/MM/YYYY [at] LT'\n  })} (${localTime.fromNow()})`;\n}\n\nconst EventItem = ({title, details, dayOfSeason, date}) => (\n  <li className=\"event-item\">\n    <div className=\"event-title\">{title}</div>\n    <div className=\"event-details\">{details}</div>\n    <div className=\"event-time\">\n      When: {fromNow(date)}\n      <br />\n      Day of Season: {dayOfSeason}\n    </div>\n  </li>\n)\n\nclass ConverterSection extends React.Component {\n  state = {\n    localTime: fromNow(moment.utc(DEFAULT_VALUE)),\n  }\n\n  handleTimeChange = (event) => {\n    const { value } = event.target;\n    console.log(value);\n    this.setState({\n      localTime: fromNow(moment.utc(value))\n    });\n  }\n\n  render() {\n    const {localTime} = this.state;\n    return (\n      <div className=\"converter\">\n        <h2>UTC to LocalTime Converter</h2>\n        <p>\n          <label>Enter a UTC time:</label>\n          <input defaultValue={DEFAULT_VALUE} type=\"datetime-local\" onChange={this.handleTimeChange} />\n        </p>\n        {localTime !== '' ? (\n          <p>\n            <label>LocalTime:</label>\n            <span>{localTime}</span>\n          </p>\n        ) : null}\n      </div>\n    );\n  }\n}\n\n\n\nconst EventListSection = () => {\n  return (\n    <section className=\"events\">\n      <h2>Event List</h2>\n      <ol>\n        {db.map((event, i) => <EventItem key={i} {...event} />)}\n      </ol>\n    </section>\n  );\n}\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <ConverterSection />\n      <hr />\n      <EventListSection />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}